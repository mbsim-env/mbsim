<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<pv:Embed xmlns:pv="http://www.mbsim-env.de/MBXMLUtils">
  <pv:Parameter>
    <pv:scalarParameter name="showPlot">False</pv:scalarParameter>
  </pv:Parameter>
  <MBSimProject xmlns="http://www.mbsim-env.de/MBSimXML" name="Project" xmlns:pv="http://www.mbsim-env.de/MBXMLUtils">
    <pv:evaluator>python</pv:evaluator>
    <pv:Embed>
      <pv:Parameter>
        <pv:vectorParameter name="x">
          [0,1,2,3,4,5]
        </pv:vectorParameter>
        <pv:matrixParameter name="y">
          [[2,2,0],[5,5,0],[8,8,0],[6,6,0],[3,3,0],[2,2,0]]
        </pv:matrixParameter>
        <pv:anyParameter name="splineIn">
          import numpy
          xx=numpy.linspace(0,5,100)
          ret={
            "xx": xx,
            "yy": [
                    {"s": 0,    "data": numpy.sin(2*xx)},
                    {"s": 0.06, "data": numpy.sin(2*xx)+(numpy.random.default_rng(87565296655).random(len(xx))-0.5)/10},
                    {"s": 0,    "data": numpy.zeros(xx.shape)},
                  ],
          }
        </pv:anyParameter>
        <pv:anyParameter name="splineOut">
          import mbxmlutils
          import numpy
          import scipy
          ret=[]
          for i in range(0,3):
            sp=scipy.interpolate.splrep(splineIn["xx"], splineIn["yy"][i]["data"], s=splineIn["yy"][i]["s"])
            ret.append(scipy.interpolate.PPoly.from_spline(sp))
        </pv:anyParameter>
      </pv:Parameter>
      <DynamicSystemSolver xmlns="http://www.mbsim-env.de/MBSim" name="MBS">
        <plotFeatureRecursive value="position">True</plotFeatureRecursive>
        <plotFeatureRecursive value="velocity">True</plotFeatureRecursive>
        <plotFeatureRecursive value="acceleration">True</plotFeatureRecursive>
        <frames/>
        <contours/>
        <groups>
          <Embed xmlns="http://www.mbsim-env.de/MBXMLUtils" count="3" counterName="g" onlyif="g!=1">
            <Group xmlns="http://www.mbsim-env.de/MBSim" name="Group1_{g}">
              <frames/>
              <contours/>
              <groups>
                <Embed xmlns="http://www.mbsim-env.de/MBXMLUtils" onlyif="g==2">
                  <Group xmlns="http://www.mbsim-env.de/MBSim" name="Group2_{g}_NONE">
                    <frames/>
                    <contours/>
                    <groups/>
                    <objects>
                      <Embed xmlns="http://www.mbsim-env.de/MBXMLUtils" count="4" counterName="o" onlyif="o!=1">
                        <pv:Parameter>
                          <pv:scalarParameter name="s">0</pv:scalarParameter>
                        </pv:Parameter>
                        <RigidBody name="smoothing_{g}_NONE_{o}" xmlns="http://www.mbsim-env.de/MBSim">
                          <?MBSIMGUI_CONTEXT_ACTION name="Show plot"
                            import PySide2
                            import numpy
                            import scipy
                            import mbxmlutils
                            import mbsim
                            import mbsimgui

                            class MyPlot(mbsimgui.MatplotlibDialog):
                              def __init__(self):
                                super().__init__()
                            
                                self.X=numpy.linspace(splineIn["xx"][0],splineIn["xx"][-1],1000)
                            
                                self.expSL=4
                                self.facSL = pow(splineIn["xx"].shape[0]/3,self.expSL-1)
                            
                                layout = PySide2.QtWidgets.QVBoxLayout()
                                self.setLayout(layout)
                                layout.addWidget(self.getPlotWidgetToolbar("splinePlot"))
                                self.plotWidget=self.getPlotWidget("splinePlot")
                                layout.addWidget(self.plotWidget)
                                hlayout = PySide2.QtWidgets.QHBoxLayout()
                                layout.addLayout(hlayout)
                                hlayout.setStretch(0, 0)
                                hlayout.setStretch(1, 0)
                                hlayout.setStretch(2, 1)
                                hlayout.addWidget(PySide2.QtWidgets.QLabel("s="))
                                self.inputSB = PySide2.QtWidgets.QDoubleSpinBox()
                                hlayout.addWidget(self.inputSB)
                                self.inputSB.setMinimum(0)
                                self.inputSB.setMaximum(1e10)
                                self.inputSB.setSingleStep(0.001)
                                self.inputSB.setDecimals(6)
                                self.inputSB.setValue(splineIn["yy"][1]["s"])
                                self.inputSB.valueChanged.connect(self.sChanged)
                                self.inputSL = PySide2.QtWidgets.QSlider(PySide2.QtCore.Qt.Horizontal)
                                hlayout.addWidget(self.inputSL)
                                self.inputSL.setMinimum(0)
                                self.inputSLFac=1000000
                                self.inputSL.setMaximum(int(splineIn["xx"].shape[0]/3)*self.inputSLFac)
                                self.inputSL.setSingleStep(self.inputSLFac/1000)
                                self.inputSL.setPageStep(self.inputSLFac/100)
                                self.inputSL.valueChanged.connect(self.sliderChanged)
                            
                                self.axes = self.plotWidget.figure.subplots()
                            
                                self.data=self.axes.plot(self.X,numpy.zeros(self.X.shape))[0]
                                self.axes.plot(splineIn["xx"],splineIn["yy"][1]["data"],marker="x",linestyle="")
                                self.axes.set_title(f"Plot for g={g} o={o} firstCall={mbsimgui_firstCall} lastCall={mbsimgui_lastCall} counterNames={mbsimgui_counterNames} counts={mbsimgui_counts}");
                            
                                self.sChanged()
                            
                              def sliderValueTos(self, s):
                                return pow(s/self.inputSLFac,self.expSL)/self.facSL
                              def sToSliderValue(self, v):
                                return pow(v*self.facSL,1/self.expSL)*self.inputSLFac
                            
                              def sChanged(self):
                                s=self.inputSB.value()
                                sp1=scipy.interpolate.splrep(splineIn["xx"],splineIn["yy"][1]["data"],s=s)
                                sp2=scipy.interpolate.PPoly.from_spline(sp1)

                                # create spline using scipy
                                self.data.set_ydata(sp2(self.X))

                                # create spline using SWIG mbsim.PiecewisePolynomFunction_d
                                # (just to check if mbsim.PiecewisePolynomFunction_d creates the same result as scipy PPoly)
                                pp=mbsim.PiecewisePolynomFunction_d()
                                pp.setBreaks(sp2.x)
                                pp.addCoefficients(sp2.c[:,:].T)
                                pp.init(mbsim.Element.preInit)
                                y=numpy.vectorize(lambda xx: pp(xx))(self.X)
                                if not numpy.allclose(y, self.data.get_ydata()):
                                  raise RuntimeError("scipy PPoly and SWIG mbsim.PiecewisePolynomFunction_d does not return the same!")

                                self.plotWidget.draw()
                                self.inputSL.blockSignals(True)
                                self.inputSL.setValue(self.sToSliderValue(s))
                                self.inputSL.blockSignals(False)
                            
                              def sliderChanged(self):
                                v=self.inputSL.value()
                                self.inputSB.setValue(self.sliderValueTos(v))
  
                            w=MyPlot()
                            w.show()

                            # create a standard matplotlib figure
                            d=mbsimgui.StdMatplotlibDialog()
                            ax=d.getFigure().subplots()
                            ax.plot([1,2,3,4],[5,4,7,2])
                            d.show()

                            mbsimgui.waitForDialogs(w, d)

                            if mbsimgui_firstCall:
                              mbxmlutils.staticData["myplotdata"]=[]
                            mbxmlutils.staticData["myplotdata"].append(f"g={g} o={o} counterNames={mbsimgui_counterNames} counts={mbsimgui_counts}")
                            print("Appended plot data")
                            if mbsimgui_lastCall:
                              PySide2.QtWidgets.QMessageBox.information(None, "Plot Summary",
                                                                        "\n".join(mbxmlutils.staticData["myplotdata"]))
                          ?>
                          <?MBSIMGUI_CONTEXT_ACTION name="Some output"
                            print("start")
                            ret={"a": 9}
                            print("end")
                          ?>
                          <mass unit="kg">1</mass>
                          <inertiaTensor unit="kg*m^2">
                            <xmlMatrix xmlns="http://www.mbsim-env.de/MBXMLUtils">
                              <row>
                                <ele>0.01</ele>
                                <ele>0</ele>
                                <ele>0</ele>
                              </row>
                              <row>
                                <ele>0</ele>
                                <ele>0.01</ele>
                                <ele>0</ele>
                              </row>
                              <row>
                                <ele>0</ele>
                                <ele>0</ele>
                                <ele>0.01</ele>
                              </row>
                            </xmlMatrix>
                          </inertiaTensor>
                          <timeDependentTranslation>
                            <VectorValuedFunction>
                              <components>
                                <PiecewisePolynomFunction>
                                  <breaks>splineOut[0].x</breaks>
                                  <coefficients>splineOut[0].c[:,:].T</coefficients>
                                </PiecewisePolynomFunction>
                                <PiecewisePolynomFunction>
                                  <breaks>splineOut[1].x</breaks>
                                  <coefficients>splineOut[1].c[:,:].T</coefficients>
                                </PiecewisePolynomFunction>
                                <PiecewisePolynomFunction>
                                  <breaks>splineOut[2].x</breaks>
                                  <coefficients>splineOut[2].c[:,:].T</coefficients>
                                </PiecewisePolynomFunction>
                              </components>
                            </VectorValuedFunction>
                          </timeDependentTranslation>
                          <frames/>
                          <contours/>
                          <openMBVRigidBody>
                            <Cube xmlns="http://www.mbsim-env.de/OpenMBV" name="Cube2">
                              <transparency unit="-">0.3</transparency>
                              <length unit="m">1</length>
                            </Cube>
                          </openMBVRigidBody>
                          <enableOpenMBVFrameC/>
                        </RigidBody>
                      </Embed>
                    </objects>
                    <links/>
                    <constraints/>
                    <observers/>
                    <enableOpenMBVFrameI/>
                  </Group>
                </Embed>
              </groups>
              <objects>
              </objects>
              <links/>
              <constraints/>
              <observers/>
              <enableOpenMBVFrameI/>
            </Group>
          </Embed>
        </groups>
        <objects>
          <RigidBody name="1dof">
            <mass unit="kg">1</mass>
            <inertiaTensor unit="kg*m^2">
              <xmlMatrix xmlns="http://www.mbsim-env.de/MBXMLUtils">
                <row>
                  <ele>0.01</ele>
                  <ele>0</ele>
                  <ele>0</ele>
                </row>
                <row>
                  <ele>0</ele>
                  <ele>0.01</ele>
                  <ele>0</ele>
                </row>
                <row>
                  <ele>0</ele>
                  <ele>0</ele>
                  <ele>0.01</ele>
                </row>
              </xmlMatrix>
            </inertiaTensor>
            <stateDependentTranslation>
              <TranslationAlongXAxis/>
            </stateDependentTranslation>
            <frames/>
            <contours/>
            <openMBVRigidBody>
              <Cube xmlns="http://www.mbsim-env.de/OpenMBV" name="Cube2">
                <transparency unit="-">0.3</transparency>
                <length unit="m">1</length>
              </Cube>
            </openMBVRigidBody>
            <enableOpenMBVFrameC/>
          </RigidBody>
          <RigidBody name="xy">
            <mass unit="kg">1</mass>
            <inertiaTensor unit="kg*m^2">
              <xmlMatrix xmlns="http://www.mbsim-env.de/MBXMLUtils">
                <row>
                  <ele>0.01</ele>
                  <ele>0</ele>
                  <ele>0</ele>
                </row>
                <row>
                  <ele>0</ele>
                  <ele>0.01</ele>
                  <ele>0</ele>
                </row>
                <row>
                  <ele>0</ele>
                  <ele>0</ele>
                  <ele>0.01</ele>
                </row>
              </xmlMatrix>
            </inertiaTensor>
            <timeDependentTranslation>
              <PiecewisePolynomFunction>
                <x>x</x>
                <y>y</y>
              </PiecewisePolynomFunction>
            </timeDependentTranslation>
            <frames/>
            <contours/>
            <openMBVRigidBody>
              <Cube xmlns="http://www.mbsim-env.de/OpenMBV" name="Cube2">
                <transparency unit="-">0.3</transparency>
                <length unit="m">1</length>
              </Cube>
            </openMBVRigidBody>
            <enableOpenMBVFrameC/>
          </RigidBody>
          <pv:Embed>
            <pv:Parameter>
              <pv:anyParameter name="spline">
                import scipy
                ret=scipy.interpolate.CubicSpline(x, y, bc_type="natural")
              </pv:anyParameter>
            </pv:Parameter>
            <RigidBody name="coeffs">
              <mass unit="kg">1</mass>
              <inertiaTensor unit="kg*m^2">
                <xmlMatrix xmlns="http://www.mbsim-env.de/MBXMLUtils">
                  <row>
                    <ele>0.01</ele>
                    <ele>0</ele>
                    <ele>0</ele>
                  </row>
                  <row>
                    <ele>0</ele>
                    <ele>0.01</ele>
                    <ele>0</ele>
                  </row>
                  <row>
                    <ele>0</ele>
                    <ele>0</ele>
                    <ele>0.01</ele>
                  </row>
                </xmlMatrix>
              </inertiaTensor>
              <timeDependentTranslation>
                <PiecewisePolynomFunction>
                  <breaks>spline.x</breaks>
                  <coefficients>spline.c[:,:,0].T</coefficients>
                  <coefficients>spline.c[:,:,1].T</coefficients>
                  <coefficients>spline.c[:,:,2].T</coefficients>
                </PiecewisePolynomFunction>
              </timeDependentTranslation>
              <frames/>
              <contours/>
              <openMBVRigidBody>
                <Cube xmlns="http://www.mbsim-env.de/OpenMBV" name="Cube2">
                  <transparency unit="-">0.3</transparency>
                  <length unit="m">1</length>
                </Cube>
              </openMBVRigidBody>
              <enableOpenMBVFrameC/>
            </RigidBody>
          </pv:Embed>
        </objects>
        <links/>
        <constraints/>
        <observers/>
        <enableOpenMBVFrameI/>
        <environments>
          <MBSimEnvironment>
            <accelerationOfGravity unit="m/s^2">
              <xmlVector xmlns="http://www.mbsim-env.de/MBXMLUtils">
                <ele>0</ele>
                <ele>-9.81</ele>
                <ele>0</ele>
              </xmlVector>
            </accelerationOfGravity>
          </MBSimEnvironment>
        </environments>
      </DynamicSystemSolver>
    </pv:Embed>
    <DOPRI5Integrator xmlns="http://www.mbsim-env.de/MBSim">
      <startTime unit="s">0</startTime>
      <endTime unit="s">5</endTime>
      <plotStepSize unit="s">1e-2</plotStepSize>
    </DOPRI5Integrator>
  </MBSimProject>
</pv:Embed>
